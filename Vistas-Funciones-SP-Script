CREATE VIEW KilosConsumidosPorFecha AS
SELECT 
    p.Fecha,
    m.Id_Materiales,
    m.Nombre_Material,
	e.Nombre,
	e.Apellido,
	e.Contacto,
    SUM(p.Peso_real) AS Kilos_Consumidos
FROM 
    Produccion p
JOIN 
    Materiales m ON p.Id_Materiales = m.Id_Materiales
JOIN
    Proveedor e ON m.Id_Proveedor = e.Id_Proveedor
GROUP BY 
    p.Fecha, m.Id_Materiales, m.Nombre_Material, e.Nombre, e.Apellido, e.Contacto;

	SELECT * FROM KilosConsumidosPorFecha

---------------------------------
---------------------------------

	CREATE VIEW ResumenProduccionMensual AS
SELECT 
    YEAR(p.Fecha) AS Anio,
    MONTH(p.Fecha) AS Mes,
    SUM(p.Cantidad_producida) AS Cantidad_Total_Producida,
    SUM(p.Scrap) AS Scrap_Total
FROM 
    Produccion p
GROUP BY 
    YEAR(p.Fecha), MONTH(p.Fecha);

	SELECT * FROM ResumenProduccionMensual

---------------------------------
---------------------------------


--------------------------------
---------------------------------
CREATE VIEW ProducciónPorMáquina AS
SELECT 
    p.Id_Maquina,
    SUM(p.Cantidad_producida) AS Total_Producido,
    SUM(p.Scrap) AS Total_Scrap,
    COUNT(DISTINCT p.Fecha) AS Dias_Produccion
FROM 
    Produccion p
GROUP BY 
    p.Id_Maquina;

	SELECT * FROM ProducciónPorMáquina
	
---------------------------------
---------------------------------
CREATE VIEW ProduccionMensualPorMaquina AS
SELECT
    p.Id_Maquina,
    m.Modelo,
    YEAR(p.Fecha) AS Año,
    MONTH(p.Fecha) AS Mes,
    SUM(p.Cantidad_producida) AS Total_Producido,
    SUM(p.Scrap) AS Total_Scrap
FROM
    Produccion p
JOIN
    Maquina m ON p.Id_Maquina = m.Id_Maquina
GROUP BY
    p.Id_Maquina,
    m.modelo,
    YEAR(p.Fecha),
    MONTH(p.Fecha);

	SELECT * FROM ProduccionMensualPorMaquina
	---------------------------------
---------------------------------

	CREATE VIEW CalidadPorOperario AS
SELECT
    o.Id_Operario,
    o.Nombre,
    SUM(p.Scrap) AS Cantidad_Scrap,
	SUM(p.Cantidad_producida) AS Cantidad_Producida,
    s.SectorNombre AS Sector_Productivo
FROM
    Produccion p
JOIN
    Operario o ON p.Id_Operario = o.Id_Operario
JOIN
	Sector s ON o.Id_Sector = s.Id_Sector
GROUP BY
    o.Id_Operario,
    o.Nombre,
	s.SectorNombre;

	SELECT * FROM CalidadPorOperario
	
	---------------------------------
---------------------------------

CREATE FUNCTION dbo.ProduccionConScrapMayorAlPromedio(
    @FechaInicio DATE,
    @FechaFin DATE
)
RETURNS TABLE
AS
RETURN
(
    WITH PromedioScrap AS
    (
        SELECT 
            AVG(Scrap * 1.0 / Cantidad_producida) AS Promedio
        FROM 
            Produccion
        WHERE
            Fecha BETWEEN @FechaInicio AND @FechaFin
    )
    SELECT 
        p.Id_Produccion,
        p.Id_Pieza,
        p.Id_Maquina,
        p.Fecha,
        p.Scrap,
        p.Cantidad_producida,
        (p.Scrap * 1.0 / p.Cantidad_producida) AS Porcentaje_Scrap
    FROM 
        Produccion p
    CROSS JOIN 
        PromedioScrap ps
    WHERE 
        p.Fecha BETWEEN @FechaInicio AND @FechaFin
        AND (p.Scrap * 1.0 / p.Cantidad_producida) > ps.Promedio
);

SELECT * FROM dbo.ProduccionConScrapMayorAlPromedio('2024-01-01', '2024-03-31');
	
	---------------------------------
---------------------------------
CREATE FUNCTION dbo.ProduccionTotalPorMaquina(
    @FechaInicio DATE,
    @FechaFin DATE
)
RETURNS TABLE
AS
RETURN
(
    SELECT
        Id_Maquina,
        SUM(Cantidad_producida) AS Total_Producido
    FROM
        Produccion
    WHERE
        Fecha BETWEEN @FechaInicio AND @FechaFin
    GROUP BY
        Id_Maquina
);

SELECT * FROM dbo.ProduccionTotalPorMaquina('2024-01-01', '2024-03-31');


---------------------------------
---------------------------------

CREATE PROCEDURE SP_ObtenerMaterialesConsumidosPorFecha
    @Fecha DATE
AS
BEGIN
    SELECT 
        p.Id_Materiales,
        r.Nombre,
		r.Apellido,
        SUM(p.Peso_real) AS PesoConsumido
    FROM 
        Produccion p
    INNER JOIN 
        Materiales m ON p.Id_Materiales = m.Id_Materiales
JOIN 
		Proveedor r ON m.Id_Proveedor = r.Id_Proveedor
    WHERE 
        p.Fecha = @Fecha
    GROUP BY 
        p.Id_Materiales, r.Nombre, r.Apellido;
END;

---------------------------------
---------------------------------

CREATE PROCEDURE SP_UltimaProduccionPieza
    @Id_Pieza VARCHAR(25)
AS
BEGIN
    SELECT TOP 1
        p.Fecha AS Ultima_Fecha_Produccion,
        p.Id_Maquina AS Maquina,
        p.Cantidad_producida AS Cantidad_Producida,
        E.Nombre AS NombreEncargado,
		E.Apellido AS NombreEncargado
    FROM
        Produccion p
JOIN Encargado e ON P.Id_Encargado = E.Id_Encargado
    WHERE
        p.Id_Pieza = @Id_Pieza
    ORDER BY
        p.Fecha DESC;
END;

---------------------------------
---------------------------------

SELECT * FROM Materiales --VER STOCK INICIALES 20000 Y 10000 KILOS

CREATE TRIGGER trg_Actualizar_Inventario3
ON Produccion
AFTER INSERT
AS
BEGIN
    UPDATE m
    SET m.Stock = m.Stock - i.Cantidad_producida * i.Peso_real
    FROM Materiales m
    INNER JOIN inserted i ON m.Id_Materiales = i.Id_Materiales;
END;

  -- Inserción de datos en la tabla Produccion para prueba de Trigger
INSERT INTO Produccion (Id_Produccion, Id_Pieza, Id_Maquina, Id_Matriz, Id_Materiales, Fecha, Cantidad_a_stock, Cantidad_producida, Scrap, Id_Motivo, Peso_real, Ciclo_real, Tiempo_real, Id_Operario, Id_Encargado, Observaciones)
VALUES
 ('PROD-0106', 'IH-0010-N', 'INY-0001', 'M-0010', 1, '2024-07-10', 1460, 1480, 20, 3, 0.052, 212.0, 12744.0, 5, 1, 'Sin novedades'),
 ('PROD-0107', 'SB-0101-AZT', 'SOP-0001', 'M-0039', 2, '2024-02-28', 530, 540, 10, 1, 0.043, 212.0, 10840.0, 1, 2, 'Producción regular');

	 SELECT * FROM Materiales --VER STOCK FINALES 

 ---------------------------------
---------------------------------

	ALTER TABLE Pieza
ADD Stock INT DEFAULT 0;

CREATE TRIGGER trg_Actualizar_StockPieza
ON Produccion
AFTER INSERT
AS
BEGIN
    -- Actualizar el stock de las piezas
    UPDATE p
    SET p.Stock = ISNULL(p.Stock, 0) + i.Cantidad_a_stock
    FROM Pieza p
    INNER JOIN inserted i ON p.Id_Pieza = i.Id_Pieza;
END;

INSERT INTO Produccion (Id_Produccion, Id_Pieza, Id_Maquina, Id_Matriz, Id_Materiales, Fecha, Cantidad_a_stock, Cantidad_producida, Scrap, Id_Motivo, Peso_real, Ciclo_real, Tiempo_real, Id_Operario, Id_Encargado, Observaciones)
VALUES
 ('PROD-0108', 'IH-0001-N', 'INY-0001', 'M-0010', 1, '2024-07-10', 1460, 1480, 20, 3, 0.052, 212.0, 12744.0, 5, 1, 'Sin novedades'),
 ('PROD-0109', 'IH-0002-N', 'SOP-0001', 'M-0039', 2, '2024-02-28', 530, 540, 10, 1, 0.043, 212.0, 10840.0, 1, 2, 'Producción regular');

 	 SELECT * FROM Pieza
--
